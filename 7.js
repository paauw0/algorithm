/**
  * @description: 狄克斯特拉算法
  */

/**
  * 狄克斯特拉算法包含4个步骤
  * (1) 找出“最便宜”的节点，即可在最短时间内到达的节点
  * (2) 对于该节点的邻居，检查是否有前往它们的更短路径，如果有，就更新其开销
  * (3) 重复这个过程，直到对图中的每个节点都这样做了
  * (4) 计算最终路径
  */

/**
  * 狄克斯特拉算法用于每条边都有关联数字的图，这些数字称为权重（weight）
  * 带权重的图称为加权图（weighted graph），不带权重的图称为非加权图（unweighted graph）
  * 要计算非加权图中的最短路径，可使用广度优先搜索。要计算加权图中的最短路径，可使用狄克斯特拉算法。
  */

/**
  * 环
  * 图还可能有环
  * 这意味着你可从一个节点出发，走一圈后又回到这个节点
  * 无向图意味着两个节点彼此指向对方，其实就是环
  * 在无向图中，每条边都是一个环

  * 狄克斯特拉算法只适用于有向无环图（directed acyclicgraph，DAG）。
  */

/**
  * 狄克斯特拉算法背后的关键理念：找出图中最便宜的节点，并确保没有到该节点的更便宜的路径！
  */

/**
  * 如果有负权边，就不能使用狄克斯特拉算法。因为负权边会导致这种算法不管用
  * 这是因为狄克斯特拉算法这样假设：对于处理过的海报节点，没有前往该节点的更短路径。这种假设仅在没有负权边时才成立
  * 因此，不能将狄克斯特拉算法用于包含负权边的图。
  * 在包含负权边的图中，要找出最短路径，可使用另一种算法——贝尔曼-福德算法（Bellman-Fordalgorithm）
  */